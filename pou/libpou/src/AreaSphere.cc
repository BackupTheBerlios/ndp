#include <GL/gl.h>

#include "AreaSphere.h"
#include "W.h"
#include "vector3.h"
#include "box3d.h"

using namespace std;

//static int vertexNum = 162;
static int triNum = 320;
static float vertexVec[162][3] = { 
  {-0.525731, 0, 0.850651}, {0.525731, 0, 0.850651},
  {-0.525731, 0, -0.850651}, {0.525731, 0, -0.850651},
  {0, 0.850651, 0.525731}, {0, 0.850651, -0.525731},
  {0, -0.850651, 0.525731}, {0, -0.850651, -0.525731},
  {0.850651, 0.525731, 0}, {-0.850651, 0.525731, 0},
  {0.850651, -0.525731, 0}, {-0.850651, -0.525731, 0},
  {0.309017, 0.5, 0.809017}, {-0.309017, 0.5, 0.809017},
  {0, 0, 1}, {-0.5, 0.809017, 0.309017},
  {-0.809017, 0.309017, 0.5}, {0, 1, 0},
  {-0.5, 0.809017, -0.309017}, {0.5, 0.809017, -0.309017},
  {0.5, 0.809017, 0.309017}, {0.809017, 0.309017, 0.5},
  {0.809017, -0.309017, 0.5}, {1, 0, 0},
  {0.809017, -0.309017, -0.5}, {0.809017, 0.309017, -0.5},
  {0.309017, 0.5, -0.809017}, {0, 0, -1},
  {-0.309017, 0.5, -0.809017}, {0.309017, -0.5, -0.809017},
  {-0.309017, -0.5, -0.809017}, {0.5, -0.809017, -0.309017},
  {0.5, -0.809017, 0.309017}, {0, -1, 0},
  {-0.5, -0.809017, 0.309017}, {-0.5, -0.809017, -0.309017},
  {-0.309017, -0.5, 0.809017}, {-0.809017, -0.309017, 0.5},
  {0.309017, -0.5, 0.809017}, {-1, 0, 0},
  {-0.809017, -0.309017, -0.5}, {-0.809017, 0.309017, -0.5},
  {0.16246, 0.262866, 0.951057}, {0, 0.525731, 0.850651},
  {-0.16246, 0.262866, 0.951057}, {-0.425325, 0.688191, 0.587785},
  {-0.688191, 0.587785, 0.425325}, {-0.587785, 0.425325, 0.688191},
  {-0.262866, 0.951057, 0.16246}, {-0.262866, 0.951057, -0.16246},
  {-0.525731, 0.850651, 0}, {0.525731, 0.850651, 0},
  {0.262866, 0.951057, -0.16246}, {0.262866, 0.951057, 0.16246},
  {0.587785, 0.425325, 0.688191}, {0.688191, 0.587785, 0.425325},
  {0.425325, 0.688191, 0.587785}, {0.850651, 0, 0.525731},
  {0.951057, -0.16246, 0.262866}, {0.951057, 0.16246, 0.262866},
  {0.951057, -0.16246, -0.262866}, {0.850651, 0, -0.525731},
  {0.951057, 0.16246, -0.262866}, {0.688191, 0.587785, -0.425325},
  {0.587785, 0.425325, -0.688191}, {0.425325, 0.688191, -0.587785},
  {0.16246, 0.262866, -0.951057}, {-0.16246, 0.262866, -0.951057},
  {0, 0.525731, -0.850651}, {0.16246, -0.262866, -0.951057},
  {0, -0.525731, -0.850651}, {-0.16246, -0.262866, -0.951057},
  {0.587785, -0.425325, -0.688191}, {0.688191, -0.587785, -0.425325},
  {0.425325, -0.688191, -0.587785}, {0.525731, -0.850651, 0},
  {0.262866, -0.951057, 0.16246}, {0.262866, -0.951057, -0.16246},
  {-0.262866, -0.951057, 0.16246}, {-0.525731, -0.850651, 0},
  {-0.262866, -0.951057, -0.16246}, {-0.425325, -0.688191, 0.587785},
  {-0.587785, -0.425325, 0.688191}, {-0.688191, -0.587785, 0.425325},
  {0, -0.525731, 0.850651}, {0.16246, -0.262866, 0.951057},
  {-0.16246, -0.262866, 0.951057}, {0.688191, -0.587785, 0.425325},
  {0.587785, -0.425325, 0.688191}, {0.425325, -0.688191, 0.587785},
  {-0.951057, -0.16246, 0.262866}, {-0.850651, 0, 0.525731},
  {-0.951057, 0.16246, 0.262866}, {-0.850651, 0, -0.525731},
  {-0.951057, -0.16246, -0.262866}, {-0.951057, 0.16246, -0.262866},
  {-0.425325, 0.688191, -0.587785}, {-0.587785, 0.425325, -0.688191},
  {-0.688191, 0.587785, -0.425325}, {-0.688191, -0.587785, -0.425325},
  {-0.587785, -0.425325, -0.688191}, {-0.425325, -0.688191, -0.587785},
  {0.433889, 0.259892, 0.862668}, {0.273267, 0, 0.961938},
  {-0.160622, 0.702046, 0.69378}, {0.160622, 0.702046, 0.69378},
  {-0.273267, 0, 0.961938}, {-0.433889, 0.259892, 0.862668},
  {-0.259892, 0.862668, 0.433889}, {-0.862668, 0.433889, 0.259892},
  {-0.702046, 0.69378, 0.160622}, {-0.69378, 0.160622, 0.702046},
  {0, 0.961938, 0.273267}, {-0.259892, 0.862668, -0.433889},
  {0, 0.961938, -0.273267}, {-0.702046, 0.69378, -0.160622},
  {0.702046, 0.69378, -0.160622}, {0.702046, 0.69378, 0.160622},
  {0.259892, 0.862668, -0.433889}, {0.259892, 0.862668, 0.433889},
  {0.69378, 0.160622, 0.702046}, {0.862668, 0.433889, 0.259892},
  {0.69378, -0.160622, 0.702046}, {0.961938, -0.273267, 0},
  {0.862668, -0.433889, 0.259892}, {0.961938, 0.273267, 0},
  {0.862668, -0.433889, -0.259892}, {0.69378, 0.160622, -0.702046},
  {0.69378, -0.160622, -0.702046}, {0.862668, 0.433889, -0.259892},
  {0.433889, 0.259892, -0.862668}, {0.160622, 0.702046, -0.69378},
  {0.273267, 0, -0.961938}, {-0.433889, 0.259892, -0.862668},
  {-0.273267, 0, -0.961938}, {-0.160622, 0.702046, -0.69378},
  {0.433889, -0.259892, -0.862668}, {-0.160622, -0.702046, -0.69378},
  {0.160622, -0.702046, -0.69378}, {-0.433889, -0.259892, -0.862668},
  {0.702046, -0.69378, -0.160622}, {0.259892, -0.862668, -0.433889},
  {0.702046, -0.69378, 0.160622}, {0, -0.961938, 0.273267},
  {0.259892, -0.862668, 0.433889}, {0, -0.961938, -0.273267},
  {-0.259892, -0.862668, 0.433889}, {-0.702046, -0.69378, -0.160622},
  {-0.702046, -0.69378, 0.160622}, {-0.259892, -0.862668, -0.433889},
  {-0.160622, -0.702046, 0.69378}, {-0.69378, -0.160622, 0.702046},
  {-0.433889, -0.259892, 0.862668}, {-0.862668, -0.433889, 0.259892},
  {0.160622, -0.702046, 0.69378}, {0.433889, -0.259892, 0.862668},
  {-0.961938, -0.273267, 0}, {-0.961938, 0.273267, 0},
  {-0.69378, -0.160622, -0.702046}, {-0.69378, 0.160622, -0.702046},
  {-0.862668, -0.433889, -0.259892}, {-0.862668, 0.433889, -0.259892}
};

static int triVec[320][3] = { 
  {44, 42, 43}, {47, 45, 46}, {50, 48, 49},
  {53, 51, 52}, {56, 54, 55}, {59, 57, 58},
  {62, 60, 61}, {65, 63, 64}, {68, 66, 67},
  {71, 69, 70}, {74, 72, 73}, {77, 75, 76},
  {80, 78, 79}, {83, 81, 82}, {86, 84, 85},
  {89, 87, 88}, {92, 90, 91}, {95, 93, 94},
  {98, 96, 97}, {101, 99, 100}, {103, 102, 42},
  {105, 104, 43}, {107, 106, 44}, {104, 108, 45},
  {110, 109, 46}, {111, 107, 47}, {108, 112, 48},
  {114, 113, 49}, {115, 110, 50}, {117, 116, 51},
  {118, 114, 52}, {112, 119, 53}, {102, 120, 54},
  {121, 117, 55}, {119, 105, 56}, {120, 122, 57},
  {124, 123, 58}, {125, 121, 59}, {123, 126, 60},
  {128, 127, 61}, {129, 125, 62}, {116, 129, 63},
  {127, 130, 64}, {131, 118, 65}, {130, 132, 66},
  {134, 133, 67}, {135, 131, 68}, {132, 136, 69},
  {138, 137, 70}, {139, 134, 71}, {136, 128, 72},
  {126, 140, 73}, {141, 138, 74}, {140, 142, 75},
  {144, 143, 76}, {145, 141, 77}, {143, 146, 78},
  {148, 147, 79}, {149, 145, 80}, {146, 150, 81},
  {152, 151, 82}, {153, 148, 83}, {150, 154, 84},
  {155, 103, 85}, {106, 152, 86}, {142, 124, 87},
  {122, 155, 88}, {154, 144, 89}, {156, 153, 90},
  {151, 111, 91}, {109, 157, 92}, {159, 158, 93},
  {160, 156, 94}, {157, 161, 95}, {113, 135, 96},
  {133, 159, 97}, {161, 115, 98}, {147, 160, 99},
  {158, 139, 100}, {137, 149, 101}, {14, 42, 44},
  {12, 43, 42}, {13, 44, 43}, {13, 45, 47},
  {15, 46, 45}, {16, 47, 46}, {15, 48, 50},
  {17, 49, 48}, {18, 50, 49}, {20, 51, 53},
  {19, 52, 51}, {17, 53, 52}, {12, 54, 56},
  {21, 55, 54}, {20, 56, 55}, {21, 57, 59},
  {22, 58, 57}, {23, 59, 58}, {23, 60, 62},
  {24, 61, 60}, {25, 62, 61}, {19, 63, 65},
  {25, 64, 63}, {26, 65, 64}, {26, 66, 68},
  {27, 67, 66}, {28, 68, 67}, {27, 69, 71},
  {29, 70, 69}, {30, 71, 70}, {29, 72, 74},
  {24, 73, 72}, {31, 74, 73}, {31, 75, 77},
  {32, 76, 75}, {33, 77, 76}, {33, 78, 80},
  {34, 79, 78}, {35, 80, 79}, {34, 81, 83},
  {36, 82, 81}, {37, 83, 82}, {36, 84, 86},
  {38, 85, 84}, {14, 86, 85}, {32, 87, 89},
  {22, 88, 87}, {38, 89, 88}, {39, 90, 92},
  {37, 91, 90}, {16, 92, 91}, {41, 93, 95},
  {40, 94, 93}, {39, 95, 94}, {18, 96, 98},
  {28, 97, 96}, {41, 98, 97}, {35, 99, 101},
  {40, 100, 99}, {30, 101, 100}, {1, 102, 103},
  {12, 42, 102}, {14, 103, 42}, {4, 104, 105},
  {13, 43, 104}, {12, 105, 43}, {0, 106, 107},
  {14, 44, 106}, {13, 107, 44}, {4, 108, 104},
  {15, 45, 108}, {13, 104, 45}, {9, 109, 110},
  {16, 46, 109}, {15, 110, 46}, {0, 107, 111},
  {13, 47, 107}, {16, 111, 47}, {4, 112, 108},
  {17, 48, 112}, {15, 108, 48}, {5, 113, 114},
  {18, 49, 113}, {17, 114, 49}, {9, 110, 115},
  {15, 50, 110}, {18, 115, 50}, {8, 116, 117},
  {19, 51, 116}, {20, 117, 51}, {5, 114, 118},
  {17, 52, 114}, {19, 118, 52}, {4, 119, 112},
  {20, 53, 119}, {17, 112, 53}, {1, 120, 102},
  {21, 54, 120}, {12, 102, 54}, {8, 117, 121},
  {20, 55, 117}, {21, 121, 55}, {4, 105, 119},
  {12, 56, 105}, {20, 119, 56}, {1, 122, 120},
  {22, 57, 122}, {21, 120, 57}, {10, 123, 124},
  {23, 58, 123}, {22, 124, 58}, {8, 121, 125},
  {21, 59, 121}, {23, 125, 59}, {10, 126, 123},
  {24, 60, 126}, {23, 123, 60}, {3, 127, 128},
  {25, 61, 127}, {24, 128, 61}, {8, 125, 129},
  {23, 62, 125}, {25, 129, 62}, {8, 129, 116},
  {25, 63, 129}, {19, 116, 63}, {3, 130, 127},
  {26, 64, 130}, {25, 127, 64}, {5, 118, 131},
  {19, 65, 118}, {26, 131, 65}, {3, 132, 130},
  {27, 66, 132}, {26, 130, 66}, {2, 133, 134},
  {28, 67, 133}, {27, 134, 67}, {5, 131, 135},
  {26, 68, 131}, {28, 135, 68}, {3, 136, 132},
  {29, 69, 136}, {27, 132, 69}, {7, 137, 138},
  {30, 70, 137}, {29, 138, 70}, {2, 134, 139},
  {27, 71, 134}, {30, 139, 71}, {3, 128, 136},
  {24, 72, 128}, {29, 136, 72}, {10, 140, 126},
  {31, 73, 140}, {24, 126, 73}, {7, 138, 141},
  {29, 74, 138}, {31, 141, 74}, {10, 142, 140},
  {32, 75, 142}, {31, 140, 75}, {6, 143, 144},
  {33, 76, 143}, {32, 144, 76}, {7, 141, 145},
  {31, 77, 141}, {33, 145, 77}, {6, 146, 143},
  {34, 78, 146}, {33, 143, 78}, {11, 147, 148},
  {35, 79, 147}, {34, 148, 79}, {7, 145, 149},
  {33, 80, 145}, {35, 149, 80}, {6, 150, 146},
  {36, 81, 150}, {34, 146, 81}, {0, 151, 152},
  {37, 82, 151}, {36, 152, 82}, {11, 148, 153},
  {34, 83, 148}, {37, 153, 83}, {6, 154, 150},
  {38, 84, 154}, {36, 150, 84}, {1, 103, 155},
  {14, 85, 103}, {38, 155, 85}, {0, 152, 106},
  {36, 86, 152}, {14, 106, 86}, {10, 124, 142},
  {22, 87, 124}, {32, 142, 87}, {1, 155, 122},
  {38, 88, 155}, {22, 122, 88}, {6, 144, 154},
  {32, 89, 144}, {38, 154, 89}, {11, 153, 156},
  {37, 90, 153}, {39, 156, 90}, {0, 111, 151},
  {16, 91, 111}, {37, 151, 91}, {9, 157, 109},
  {39, 92, 157}, {16, 109, 92}, {2, 158, 159},
  {40, 93, 158}, {41, 159, 93}, {11, 156, 160},
  {39, 94, 156}, {40, 160, 94}, {9, 161, 157},
  {41, 95, 161}, {39, 157, 95}, {5, 135, 113},
  {28, 96, 135}, {18, 113, 96}, {2, 159, 133},
  {41, 97, 159}, {28, 133, 97}, {9, 115, 161},
  {18, 98, 115}, {41, 161, 98}, {11, 160, 147},
  {40, 99, 160}, {35, 147, 99}, {2, 139, 158},
  {30, 100, 139}, {40, 158, 100}, {7, 149, 137},
  {35, 101, 149}, {30, 137, 101}
};

static const float SPHERE_INTERSECT_EPSILON = 0.0001;

bool 
AreaSphere::intersect(const Vec3f& p) const
{
  return (p.dist2(center) < radius2);
}

bool 
AreaSphere::intersectRay (const Vec3f & origin, const Vec3f & direction, float & depth1, float & depth2) const 
{
  float OCSquared, tClosestApproach, halfChord, tHalfChordSquared;
  Vec3f originToCenter;

  originToCenter = center - origin;

  OCSquared =  originToCenter.dot (originToCenter);

  tClosestApproach = originToCenter.dot (direction);

  if ((OCSquared >= radius2) && (tClosestApproach < SPHERE_INTERSECT_EPSILON))
    return false;
  
  tHalfChordSquared = radius2 - OCSquared + (tClosestApproach * tClosestApproach);

  if (tHalfChordSquared > SPHERE_INTERSECT_EPSILON)
  {
    halfChord = sqrt (tHalfChordSquared);
    depth1 = tClosestApproach - halfChord;
    depth2 = tClosestApproach + halfChord;
    
    return true;
  }

  return false;
}
 
float 
AreaSphere::w(const Vec3f& p) const
{
  if (! intersect(p))
    return 0;
  
  float dist = p.dist(center) / radius; 

  //return w0(dist);

  //return w1(dist);

  //return w2(dist);
 
  return w2(dist);
}

void AreaSphere::wd(const Vec3f& p, Vec3f& v) 
{
  if (! intersect(p)){
    v.setValues(0,0,0);  
    cout << " Bailed out of wd. " << endl;
    exit(1);
    return;
  }
  
  float distpur = p.dist(center);
  float dist = p.dist(center) / radius; 
  float wderived = w2d(dist);
  
  float d2r = 1/(radius * distpur);
  
  v.setValues( -wderived * d2r * (center.x - p.x),
               -wderived * d2r * (center.y - p.y),  
               -wderived * d2r * (center.z - p.z) );
   
}

Vec3f& 
AreaSphere::getCenter(void)
{
  return center;
}


void 
AreaSphere::display(void)
{
#if 0
    //cout << center << " ---- " << radius << endl;

//  glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
  glBegin(GL_TRIANGLES);
  
  for(int i=0; i<triNum; i++)
    {
      int v0 = triVec[i][0];
      int v1 = triVec[i][1];
      int v2 = triVec[i][2];

      Vec3f vv0(vertexVec[v0][0],vertexVec[v0][1],vertexVec[v0][2]);
      Vec3f vv1(vertexVec[v1][0],vertexVec[v1][1],vertexVec[v1][2]);
      Vec3f vv2(vertexVec[v2][0],vertexVec[v2][1],vertexVec[v2][2]);
      
      vv0 *= radius; vv0 += center;
      vv1 *= radius; vv1 += center;
      vv2 *= radius; vv2 += center;
  
      //glColor3f(1,0,0);
    
      glVertex3f(vv0[0],vv0[1],vv0[2]);
      glVertex3f(vv1[0],vv1[1],vv1[2]);
      glVertex3f(vv2[0],vv2[1],vv2[2]);
    }

  glEnd();
//  glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
#endif
}


void 
AreaSphere::save(ostream& stream)
{
  stream << center[0] << " "
	 << center[1] << " "
	 << center[2] << " "
	 << radius << endl;
}

Area**
AreaSphere::subdivide(void)
{
  //cout << "AreaSphere::subdivide" << endl;
  Area** newArea = new Area*[8];
  float r = radius / (2*sqrt(3.0f));
  float r2 = radius / 2 ;
  
  newArea[0] = new AreaSphere(center + Vec3f(-r,-r,-r), r2);
  newArea[1] = new AreaSphere(center + Vec3f(-r,-r,r), r2);
  newArea[2] = new AreaSphere(center + Vec3f(-r,r,-r), r2);
  newArea[3] = new AreaSphere(center + Vec3f(-r,r,r), r2);
  
  newArea[4] = new AreaSphere(center + Vec3f(r,-r,-r), r2);
  newArea[5] = new AreaSphere(center + Vec3f(r,-r,r), r2);
  newArea[6] = new AreaSphere(center + Vec3f(r,r,-r), r2);
  newArea[7] = new AreaSphere(center + Vec3f(r,r,r), r2);

  return newArea;
}


void 
AreaSphere::grow(const float val)
{
  radius *= (1.0f + val);
  radius2 = radius*radius;
}

void 
AreaSphere::reduce(const float val)
{
  radius /= (1.0f + val);
  radius2 = radius*radius;
}

